// generated by Fast Light User Interface Designer (fluid) version 1.0104

#include "pref_form.h"
void load_lang_cb(char *file);
int text_size;
int save_window_size;
int auto_brace_mode;
int auto_hide;
int delbak;
int backup_file;
extern int gDisableHl;
extern int gSmartIndent;
extern int gReloadProject;

Fl_Double_Window *pref_window=(Fl_Double_Window *)0;

Fl_Button *pref_ok_btn=(Fl_Button *)0;
Fl_Input *tab_size_choice=(Fl_Input *)0;
char stab[10];


static void cb_pref_ok_btn(Fl_Button*, void*) 
{
	text_size = text_size_choice->value() * 2 + 6;
    tab_size = atoi(tab_size_choice->value());
	auto_brace_mode = auto_brace_check->value();
	save_window_size = save_wsoe_check->value();
	auto_hide = hide_output_check->value();
	hl_plain = plain_btn->color();
	hl_linecomment = line_btn->color();
	hl_blockcomment = block_btn->color();
	hl_string = string_btn->color();
	hl_directive = directive_btn->color();
	hl_type = type_btn->color();
	hl_keyword = keyword_btn->color();
	hl_character = character_btn->color();
	hl_label = label_btn->color();
	background_color = bg_btn->color();
	sprintf(usrdocdir,"%s",usrdoc_input->value());
	backup_file = bak_check->value();
	delbak = delbak_check->value();
	gDisableHl = disable_hl_check->value();
	gSmartIndent = smart_indent_check->value();
	gReloadProject = rec_pr_check->value();
	pref_window->hide();
}

Fl_Button *pref_cancel_btn=(Fl_Button *)0;

static void cb_pref_cancel_btn(Fl_Button*, void*) {
  pref_window->hide();
}

Fl_Tabs *pref_tabs=(Fl_Tabs *)0;

Fl_Group *ed_group=(Fl_Group *)0;

Fl_Choice *text_size_choice=(Fl_Choice *)0;

Fl_Check_Button *smart_indent_check=(Fl_Check_Button *)0;

Fl_Check_Button *save_wsoe_check=(Fl_Check_Button *)0;

Fl_Check_Button *hide_output_check=(Fl_Check_Button *)0;

Fl_Check_Button *rec_pr_check=(Fl_Check_Button *)0;

Fl_Box *pref_highlight_label=(Fl_Box *)0;

Fl_Button *plain_btn=(Fl_Button *)0;

static void cb_plain_btn(Fl_Button*, void*) {
  plain_btn->color(fl_show_colormap(plain_btn->color()));
}

Fl_Button *line_btn=(Fl_Button *)0;

static void cb_line_btn(Fl_Button*, void*) {
  line_btn->color(fl_show_colormap(line_btn->color()));
}

Fl_Button *block_btn=(Fl_Button *)0;

static void cb_block_btn(Fl_Button*, void*) {
  block_btn->color(fl_show_colormap(block_btn->color()));
}

Fl_Button *string_btn=(Fl_Button *)0;

static void cb_string_btn(Fl_Button*, void*) {
  string_btn->color(fl_show_colormap(string_btn->color()));
}

Fl_Button *directive_btn=(Fl_Button *)0;

static void cb_directive_btn(Fl_Button*, void*) {
  directive_btn->color(fl_show_colormap(directive_btn->color()));
}

Fl_Button *type_btn=(Fl_Button *)0;

static void cb_type_btn(Fl_Button*, void*) {
  type_btn->color(fl_show_colormap(type_btn->color()));
}

Fl_Button *keyword_btn=(Fl_Button *)0;

static void cb_keyword_btn(Fl_Button*, void*) {
  keyword_btn->color(fl_show_colormap(keyword_btn->color()));
}

Fl_Button *character_btn=(Fl_Button *)0;

static void cb_character_btn(Fl_Button*, void*) {
  character_btn->color(fl_show_colormap(character_btn->color()));
}

Fl_Button *label_btn=(Fl_Button *)0;

static void cb_label_btn(Fl_Button*, void*) {
  label_btn->color(fl_show_colormap(label_btn->color()));
}

Fl_Button *bg_btn=(Fl_Button *)0;

static void cb_bg_btn(Fl_Button*, void*) {
  bg_btn->color(fl_show_colormap(bg_btn->color()));
}

Fl_Check_Button *auto_brace_check=(Fl_Check_Button *)0;

Fl_Check_Button *bak_check=(Fl_Check_Button *)0;

Fl_Check_Button *delbak_check=(Fl_Check_Button *)0;

Fl_Check_Button *disable_hl_check=(Fl_Check_Button *)0;

Fl_Group *env_group=(Fl_Group *)0;

Fl_Input *usrdoc_input=(Fl_Input *)0;

Fl_Button *lang_btn=(Fl_Button *)0;

static void cb_lang_btn(Fl_Button*, void*) {
  char *fname = fl_file_chooser("","*.lng","");
if(fname==NULL) return;
//load_lang_cb(fname);
}

Fl_Output *cur_lang_output=(Fl_Output *)0;

Fl_Button *def_lang_btn=(Fl_Button *)0;

static void cb_def_lang_btn(Fl_Button*, void*) {
  //load_lang_cb(NULL);
}

Fl_Double_Window* make_pref_form() {
  Fl_Double_Window* w;

  if (pref_window != (Fl_Double_Window *) 0)
	  return pref_window;

  { Fl_Double_Window* o = pref_window = new Fl_Double_Window(525, 355, "Preferences");
    w = o;
    o->align(FL_ALIGN_TOP_LEFT);
    { Fl_Button* o = pref_ok_btn = new Fl_Button(345, 320, 85, 25, "OK");
      o->callback((Fl_Callback*)cb_pref_ok_btn);
    }
    { Fl_Button* o = pref_cancel_btn = new Fl_Button(435, 320, 80, 25, "Cancel");
      o->callback((Fl_Callback*)cb_pref_cancel_btn);
    }
    { Fl_Tabs* o = pref_tabs = new Fl_Tabs(5, 5, 515, 310);
      { Fl_Group* o = ed_group = new Fl_Group(10, 40, 510, 275, "Editor");
        { Fl_Box* o = new Fl_Box(20, 85, 260, 215);
          o->box(FL_ENGRAVED_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Choice* o = text_size_choice = new Fl_Choice(90, 45, 60, 25, "Text Size");
          o->down_box(FL_BORDER_BOX);
          text_size_choice->add("6");text_size_choice->add("8");text_size_choice->add("10");text_size_choice->add("12");text_size_choice->add("14");text_size_choice->add("16");text_size_choice->add("18");text_size_choice->add("20");
          text_size_choice->value(3);
        }
        { Fl_Input* i = tab_size_choice = new Fl_Input(240, 45, 40, 25, "Tab Size");
          sprintf(stab, "%d", tab_size);
          tab_size_choice->value(stab);
        }
        { Fl_Check_Button* o = smart_indent_check = new Fl_Check_Button(30, 95, 180, 25, "Use Auto-Indent Option");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Check_Button* o = save_wsoe_check = new Fl_Check_Button(30, 145, 195, 25, "Save Window Size On Exit");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Check_Button* o = hide_output_check = new Fl_Check_Button(30, 170, 195, 25, "Auto-hide Output Window");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Check_Button* o = rec_pr_check = new Fl_Check_Button(30, 195, 235, 25, "Open previous project on startup");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Box* o = pref_highlight_label = new Fl_Box(290, 40, 220, 260, "Highlight Colors");
          o->box(FL_ENGRAVED_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Button* o = plain_btn = new Fl_Button(320, 70, 15, 15, "Plain Text");
          o->callback((Fl_Callback*)cb_plain_btn);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Button* o = line_btn = new Fl_Button(320, 90, 15, 15, "Line Comments");
          o->callback((Fl_Callback*)cb_line_btn);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Button* o = block_btn = new Fl_Button(320, 110, 15, 15, "Block Comments");
          o->callback((Fl_Callback*)cb_block_btn);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Button* o = string_btn = new Fl_Button(320, 130, 15, 15, "Strings");
          o->callback((Fl_Callback*)cb_string_btn);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Button* o = directive_btn = new Fl_Button(320, 150, 15, 15, "Directives");
          o->callback((Fl_Callback*)cb_directive_btn);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Button* o = type_btn = new Fl_Button(320, 170, 15, 15, "Keywords");
          o->callback((Fl_Callback*)cb_type_btn);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Button* o = keyword_btn = new Fl_Button(320, 190, 15, 15, "Instructions");
          o->callback((Fl_Callback*)cb_keyword_btn);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Button* o = character_btn = new Fl_Button(320, 210, 15, 15, "Characters");
          o->callback((Fl_Callback*)cb_character_btn);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Button* o = label_btn = new Fl_Button(320, 230, 15, 15, "Labels");
          o->callback((Fl_Callback*)cb_label_btn);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Button* o = bg_btn = new Fl_Button(320, 250, 15, 15, "Background");
          o->callback((Fl_Callback*)cb_bg_btn);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Check_Button* o = auto_brace_check = new Fl_Check_Button(30, 120, 180, 25, "Use Auto-Brace Option");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Check_Button* o = bak_check = new Fl_Check_Button(30, 220, 235, 25, "Create backup when loading file");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Check_Button* o = delbak_check = new Fl_Check_Button(30, 245, 235, 25, "Delete backup files on exit");
          o->down_box(FL_DOWN_BOX);
        }
        { Fl_Check_Button* o = disable_hl_check = new Fl_Check_Button(30, 270, 235, 25, "Disable syntax highlighting");
          o->down_box(FL_DOWN_BOX);
        }
        o->end();
      }
      { Fl_Group* o = env_group = new Fl_Group(15, 30, 505, 255, "Environment");
        o->hide();
        usrdoc_input = new Fl_Input(155, 55, 345, 25, "Path to FLTK Docs");
        { Fl_Button* o = lang_btn = new Fl_Button(155, 145, 180, 25, "Load Language File");
          o->callback((Fl_Callback*)cb_lang_btn);
        }
        cur_lang_output = new Fl_Output(155, 115, 180, 25, "Current Language");
        { Fl_Button* o = def_lang_btn = new Fl_Button(355, 115, 145, 25, "Restore Default");
          o->callback((Fl_Callback*)cb_def_lang_btn);
        }
        o->end();
      }
      o->end();
    }
    o->set_modal();
    o->end();
  }
  return w;
}
